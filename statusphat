#!/usr/bin/env python3

# statusphat - display IP address and temperature on pHAT


__version__ = "0.1 (2020-10-21)"


import time

import scrollphathd as sphd
from scrollphathd.fonts import font5x7

import bme680

import socket

from threading import Thread
from queue import Queue


# get my hostname (we do this once and assume it doesn't change)

hostname = socket.gethostname()


# function to get the default route IP address

def get_ip():
    # create a socket and try to connect to an address (which is unroutable,
    # but we don't send anything, anyway, as it's a datagram socket so nothing
    # is sent just upon opening)

    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    try:
        s.connect(("192.0.2.1", 1))
        ip = s.getsockname()[0]

    except OSError:
        # this probably means we have no route, so return no address

        return None

    finally:
        s.close()

    return ip


# function to get the current temperature

def get_temp():
    try:
        sensor = bme680.BME680(bme680.I2C_ADDR_PRIMARY)
        sensor.set_temperature_oversample(bme680.OS_8X)
        sensor.get_sensor_data()

    except OSError:
        return None

    return "%.1f'C" % getattr(sensor.data, "temperature")


# thread function to return the [updated] status string (IP + temp)

def get_status(q):
    msg = ("%s %s %s "
              % (hostname, get_ip() or "network?", get_temp() or "temp?"))

    q.put(msg)


# initialise the display

sphd.rotate(180)
sphd.set_font(font5x7)
sphd.set_brightness(0.5)


# create the message queue from the thread to the main program

q = Queue()


# set a default message so we're always one iteration ahead of needing it for
# display, so there's no hold-up

msg = "STATUSPHAT %s " % __version__


# loop, scrolling the message, starting with a default message

while True:
    # create and spawn a thread to get the [updated] status - the use of a
    # thread will ensure the data is ready by the time we need it

    t = Thread(target=get_status, args=(q, ))
    t.start()


    # work out and print the message
    #
    # we print the message twice and take the width after the first copy so we
    # can scroll with wraparound

    sphd.clear()

    sphd.write_string(msg)


    # we know we've reached the end when we've scrolled this entire message;
    # this will include the start of the next message that we don't have yet,
    # but we will get it when we reach the trigger point

    x_end = sphd.get_buffer_shape()[0]


    # the trigger point is one screen before the end of the message - it's
    # where we need the next message to tack on the end

    x_trigger = x_end - sphd.get_shape()[0]


    # scroll the display

    for x_offset in range(0, x_end):
        # scroll to the offset position and re-show the message

        sphd.scroll_to(x_offset, 0)
        sphd.show()


        time.sleep(0.005)


        # if we've reached the trigger point, get the status from the thread
        # and add it on the end

        if x_offset == x_trigger:
            msg = q.get()
            sphd.write_string(msg, x=sphd.get_buffer_shape()[0])
